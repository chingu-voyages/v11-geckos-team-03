{"version":3,"sources":["components/board/AddList.js","components/board/list/AddCard.js","components/board/list/Card.js","components/board/list/List.js","components/board/Board.js","components/navbar/BoardTitle.js","components/navbar/Logo.js","components/navbar/Menu.js","components/navbar/NavBar.js","components/app/App.js","serviceWorker.js","index.js"],"names":["AddList","state","mode","listTitle","inputValid","borderColor","spans","addListRef","React","createRef","setSpans","height","current","clientHeight","Math","floor","setState","toggleMode","onFormSubmit","event","preventDefault","props","onSubmit","alert","handleChange","e","inputUnique","currentLists","forEach","list","target","value","title","this","ref","className","onClick","style","gridRowEnd","type","onChange","borderBottomColor","placeholder","autoFocus","Component","AddCard","backgroundColor","cardTitle","default","hover","hoverBackground","resetBackground","addCardPromptRef","addCardInputRef","promptHeight","inputHeight","currentHeight","setSpansUpdate","setSpansUpdateForCard","onMouseOver","onMouseLeave","Card","List","cards","headingRef","cardsRef","addCardHeight","ceil","cardsHeight","removeList","remove","addNewCard","currentCards","push","cardsArray","map","card","key","listRef","Board","lists","onListSubmit","filter","listsArray","BoardTitle","inputText","titleText","inputHandler","keyDownHandler","newTitle","checkEmptyInput","onBlurHandler","onFocusHandler","select","onMouseOverHandler","document","activeElement","onMouseOutHandler","setInputSize","querySelector","width","length","setPageTitle","onKeyDown","onBlur","onFocus","onMouseOut","logo","NavBar","Logo","Menu","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f80299d0.chunk.js","sourcesContent":["import React from \"react\";\n\nclass AddList extends React.Component {\n  state = {\n    mode: \"prompt\",\n    listTitle: \"\",\n    inputValid: false,\n    borderColor: \"#555\",\n    spans: 0\n  };\n\n  // Inialize element height on grid. Its grid height is based on CSS grid spans, so we fetch that value from the DOM and set the number of spans accordingly\n  addListRef = React.createRef();\n\n  setSpans = () => {\n    const height = this.addListRef.current.clientHeight;\n\n    const spans = Math.floor(height / 10);\n\n    this.setState({ spans: spans });\n  };\n\n  componentDidMount() {\n    this.setSpans();\n  }\n\n  // Mode toggle. This component has two modes: \"prompt\" and \"input.\" The \"prompt\" mode is the initial mode, basically a button with a label like \"add new list.\" When the user clicks that button, the mode changes to \"input,\" and the user can input and submit a new list and title.\n  toggleMode = () => {\n    if (this.state.mode === \"prompt\") {\n      this.setState({ mode: \"input\" });\n    } else {\n      this.setState({ mode: \"prompt\" });\n    }\n  };\n\n  // Submit handlers\n  onFormSubmit = event => {\n    event.preventDefault();\n\n    // Validate input\n    if (!this.state.listTitle) {\n      alert(\"Please enter a title.\");\n      return false;\n    } else if (!this.state.inputValid) {\n      alert(\n        `A list with the title \"${this.state.listTitle}\" already exists. Please try a different title.`\n      );\n      return false;\n    }\n\n    // Submit input\n    this.props.onSubmit(this.state.listTitle);\n\n    // Clear input\n    this.setState({ listTitle: \"\", inputValid: false, borderColor: \"#555\" });\n\n    // Change mode back to \"prompt\"\n    this.toggleMode();\n  };\n\n  // Controlled input and validation to ensure unique list titles\n  handleChange = e => {\n    //Check if user input matches existing list title\n    let inputUnique = true;\n    this.props.currentLists.forEach(list => {\n      if (e.target.value === list.title) {\n        inputUnique = false;\n      }\n    });\n\n    // After check, update state\n    inputUnique\n      ? this.setState({\n          listTitle: e.target.value,\n          inputValid: true,\n          borderColor: \"#4fa644\"\n        })\n      : this.setState({\n          listTitle: e.target.value,\n          inputValid: false,\n          borderColor: \"red\"\n        });\n\n    // Reset border color if input is empty\n    if (!e.target.value) {\n      this.setState({\n        borderColor: \"#555\"\n      });\n    }\n  };\n\n  render() {\n    if (this.state.mode === \"prompt\") {\n      return (\n        <div ref={this.addListRef} className=\"addList addList__prompt\">\n          <button onClick={this.toggleMode} className=\"addList__prompt-button\">\n            <span className=\"addList__prompt-plus\">+</span>\n            <span className=\"addList__prompt-label\"> Add new list</span>\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"addList addList__input\"\n          ref={this.addListRef}\n          style={{ gridRowEnd: `span ${this.state.spans}` }}\n        >\n          <div className=\"addList__form\">\n            <form onSubmit={this.onFormSubmit} className=\"form\">\n              <div className=\"form__group\">\n                <input\n                  type=\"text\"\n                  className=\"form form__input form__input--validation\"\n                  value={this.state.listTitle}\n                  onChange={this.handleChange}\n                  style={{ borderBottomColor: this.state.borderColor }}\n                  placeholder=\"New list title...\"\n                  autoFocus\n                />\n              </div>\n              <div className=\"form__group\">\n                <input\n                  type=\"submit\"\n                  className=\"form__submit\"\n                  value=\"Add List\"\n                />\n              </div>\n            </form>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default AddList;\n","import React from \"react\";\n\nclass AddCard extends React.Component {\n  // This component has two modes: \"prompt\" and \"input.\" The \"prompt\" mode is the initial mode, basically a button with a label like \"add new card.\" When the user clicks that button, the mode changes to \"input,\" and the user can input and submit a new card and title.\n  state = {\n    mode: \"prompt\",\n    backgroundColor: \"\",\n    cardTitle: \"\"\n  };\n\n  // Hover effect (CSS's :hover pseudoselector wasn't creating the desired effect)\n  backgroundColor = {\n    default: \"#c5c9eb\",\n    hover: \"#9093ad\"\n  };\n\n  hoverBackground = () => {\n    this.setState({ backgroundColor: this.backgroundColor.hover });\n  };\n\n  resetBackground = () => {\n    this.setState({ backgroundColor: this.backgroundColor.default });\n  };\n\n  // Set initial background color, get height for this.promptHeight\n  addCardPromptRef = React.createRef();\n  addCardInputRef = React.createRef();\n\n  promptHeight = 0;\n  inputHeight = 96; // TODO: don't hardcode this value\n\n  componentDidMount() {\n    this.setState({\n      backgroundColor: this.backgroundColor.default\n    });\n\n    this.promptHeight = this.addCardPromptRef.current.clientHeight;\n  }\n\n  // Mode and height toggle\n  toggleMode = () => {\n    if (this.state.mode === \"prompt\") {\n      this.setState({ mode: \"input\" });\n    } else {\n      this.setState({ mode: \"prompt\" });\n    }\n\n    let currentHeight =\n      this.state.mode === \"input\" ? this.promptHeight : this.inputHeight;\n    this.props.setSpansUpdate(currentHeight);\n  };\n\n  // Card sumbit handler\n  onFormSubmit = e => {\n    e.preventDefault();\n\n    // Call parent component's onSubmit function if user has entered a card title\n    if (this.state.cardTitle) {\n      this.props.onSubmit(this.state.cardTitle);\n\n      // Clear input, change mode\n      this.setState({ cardTitle: \"\", mode: \"prompt\" });\n      this.props.setSpansUpdateForCard(this.promptHeight);\n    } else {\n      return false;\n    }\n  };\n\n  // Controlled input handler\n  handleChange = e => {\n    this.setState({ cardTitle: e.target.value });\n  };\n\n  render() {\n    if (this.state.mode === \"prompt\") {\n      return (\n        <div\n          className=\"list__addCard list__addCard-prompt\"\n          style={{ backgroundColor: this.state.backgroundColor }}\n          onMouseOver={this.hoverBackground}\n          onMouseLeave={this.resetBackground}\n          onClick={this.toggleMode}\n          ref={this.addCardPromptRef}\n        >\n          <span className=\"list__addCard-prompt--plus\">+</span>\n          <span className=\"list__addCard-prompt--label\">Add new card</span>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"list__addCard list__addCard-form\"\n          style={{ backgroundColor: this.backgroundColor.default }}\n          ref={this.addCardInputRef}\n        >\n          <form onSubmit={this.onFormSubmit} className=\"form\">\n            <div className=\"form__group\">\n              <input\n                type=\"text\"\n                className=\"form form__input form__input--validation\"\n                value={this.state.cardTitle}\n                onChange={this.handleChange}\n                style={{ borderBottomColor: this.state.borderColor }}\n                placeholder=\"New card title...\"\n                autoFocus\n              />\n            </div>\n            <div className=\"form__group\">\n              <input type=\"submit\" className=\"form__submit\" value=\"Add Card\" />\n              <button className=\"form__cancel\" onClick={this.toggleMode}>\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nexport default AddCard;\n","import React from \"react\";\n\nclass Card extends React.Component {\n  render() {\n    return <div className=\"card\">{this.props.cardTitle}</div>;\n  }\n}\n\nexport default Card;\n","import AddCard from \"./AddCard\";\nimport Card from \"./Card\";\nimport React from \"react\";\n\nclass List extends React.Component {\n  state = {\n    cards: [],\n    spans: 13\n  };\n\n  // Element height handlers. The Lists' height is based on CSS grid spans, so when the Lists' height changes, we have to set a new value for the spans.\n  headingRef = React.createRef();\n  cardsRef = React.createRef();\n\n  setSpansUpdate = addCardHeight => {\n    // The height of the List is the sum of the heights of its heading, its cards div and the AddCard component. Since we have to create a ref for AddCard directly on that component, we make this function a prop of AddCard, retrieve the height from inside that AddCard, and pass that height as an argument to this function.\n    const height =\n      this.headingRef.current.clientHeight +\n      this.cardsRef.current.clientHeight +\n      addCardHeight;\n\n    const spans = Math.ceil(height / 10) + 1; // +1 to ensure a minimum bottom margin of one span height for the List\n\n    this.setState({ spans: spans });\n  };\n\n  setSpansUpdateForCard = addCardHeight => {\n    // When adding a card, the cards div's ref gives us its height before the card has been added. Therefore, before the card is added, we need to predict what that div's height will be and set the List's height accordingly.\n    let cardsHeight;\n    const cardsDivHeightWhenEmpty = 10; // TODO: don't hardcode this value\n    const heightOfOneCard = 45; // TODO: don't hardcode this value\n\n    if (this.cardsRef.current.clientHeight === cardsDivHeightWhenEmpty) {\n      cardsHeight = heightOfOneCard;\n    } else {\n      cardsHeight = this.cardsRef.current.clientHeight + heightOfOneCard;\n    }\n\n    const height =\n      this.headingRef.current.clientHeight + cardsHeight + addCardHeight;\n\n    const spans = Math.ceil(height / 10) + 1;\n\n    this.setState({ spans: spans });\n  };\n\n  // Event handler for when user clicks the remove button\n  removeList = () => {\n    this.props.remove(this.props.listTitle);\n  };\n\n  // Add new card handlers\n  Card = function(title) {\n    this.title = title;\n  };\n\n  addNewCard = title => {\n    let currentCards = [...this.state.cards];\n    currentCards.push(new this.Card(title));\n    this.setState({ cards: currentCards });\n  };\n\n  cardsArray = () =>\n    this.state.cards.map(card => {\n      return <Card key={card.title} cardTitle={card.title} />;\n    });\n\n  render() {\n    return (\n      <div\n        className=\"list\"\n        ref={this.listRef}\n        style={{ gridRowEnd: `span ${this.state.spans}` }}\n      >\n        <div className=\"list__remove\" onClick={this.removeList}>\n          &times;\n        </div>\n        <h2 className=\"list__heading\" ref={this.headingRef}>\n          {this.props.listTitle}\n        </h2>\n        <div className=\"list__cards\" ref={this.cardsRef}>\n          {this.cardsArray()}\n        </div>\n        <AddCard\n          onSubmit={this.addNewCard}\n          setSpansUpdate={this.setSpansUpdate}\n          setSpansUpdateForCard={this.setSpansUpdateForCard}\n        />\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import AddList from \"./AddList\";\nimport List from \"./list/List\";\nimport React from \"react\";\n\nclass Board extends React.Component {\n  state = { lists: [] };\n\n  // List constructor function\n  List = function(title) {\n    this.title = title;\n    this.cards = [];\n  };\n\n  // Update state with new list, setting the list title as the argument 'title'\n  onListSubmit = title => {\n    let currentLists = [...this.state.lists];\n    currentLists.push(new this.List(title));\n    this.setState({ lists: currentLists });\n  };\n\n  // Iterate over lists, keep only the ones that have a title other than the function argument\n  removeList = title => {\n    let currentLists = [...this.state.lists];\n    currentLists = currentLists.filter(list => list.title !== title);\n    this.setState({ lists: currentLists });\n  };\n\n  // Function to create List components from state\n  listsArray = () =>\n    this.state.lists.map(list => {\n      return (\n        <List\n          key={list.title}\n          listTitle={list.title}\n          remove={this.removeList}\n        />\n      );\n    });\n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.listsArray()}\n        <AddList\n          onSubmit={this.onListSubmit}\n          currentLists={this.state.lists}\n        ></AddList>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\n\nclass BoardTitle extends Component {\n  state = {\n    inputText: \"Board Title\",\n    titleText: \"Board Title\"\n  };\n\n  // Initially sets size of input and page title\n  componentDidMount() {\n    this.setInputSize(this.state.titleText.length);\n    this.setPageTitle();\n  }\n\n  // Sets page title and input size every time state is updated\n  componentDidUpdate() {\n    this.setPageTitle();\n    this.setInputSize();\n  }\n\n  // Updates state on user input\n  inputHandler = event => {\n    const inputText = event.target.value;\n\n    this.setState({\n      inputText: inputText\n    });\n  };\n\n  // When user hits Enter or Escape, calls checkEmptyInput\n  keyDownHandler = event => {\n    const newTitle = event.target.value;\n\n    if (event.key === \"Enter\" || event.key === \"Escape\") {\n      this.checkEmptyInput(newTitle);\n    }\n  };\n\n  // Calls checkEmptyInput when input loses focus\n  onBlurHandler = event => {\n    const newTitle = event.target.value;\n\n    event.target.className = \"navbar__input\";\n\n    this.checkEmptyInput(newTitle);\n  };\n\n  // Changes input styling on focus, and selects all input text\n  onFocusHandler = event => {\n    event.target.className = \"navbar__input navbar__input--infocus\";\n\n    event.target.select();\n  };\n\n  // Changes input styling on mouse over\n  onMouseOverHandler = event => {\n    document.activeElement === event.target\n      ? (event.target.className = \"navbar__input navbar__input--infocus\")\n      : (event.target.className = \"navbar__input navbar__input--hover\");\n  };\n\n  // Changes input styling on mouse out\n  onMouseOutHandler = event => {\n    document.activeElement === event.target\n      ? (event.target.className = \"navbar__input navbar__input--infocus\")\n      : (event.target.className = \"navbar__input\");\n  };\n\n  // If user input is empty, resets value to most recently saved value of titleText\n  // Otherwise, value of titleText set to current input value\n  checkEmptyInput = newTitle => {\n    if (newTitle === \"\") {\n      this.setState({\n        inputText: this.state.titleText\n      });\n    } else {\n      this.setState({\n        titleText: newTitle\n      });\n    }\n  };\n\n  // Changes input width dynamically\n  setInputSize = () => {\n    const input = document.querySelector(\"input\");\n\n    input.style.width = `${this.state.inputText.length * 10 + 30}px`;\n  };\n\n  // Changes page title dynamically\n  setPageTitle = () => {\n    document.title = `${this.state.inputText} - Geckorello, a Trello Front-End Clone`;\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          className=\"navbar__input\"\n          value={this.state.inputText}\n          onChange={this.inputHandler}\n          onKeyDown={this.keyDownHandler}\n          onBlur={this.onBlurHandler}\n          onFocus={this.onFocusHandler}\n          onMouseOver={this.onMouseOverHandler}\n          onMouseOut={this.onMouseOutHandler}\n        ></input>\n      </div>\n    );\n  }\n}\n\nexport default BoardTitle;\n","import React from \"react\";\n\nconst logo = () => {\n  return (\n    <div className=\"logo navbar__logo\">\n      <h1>Geckorello</h1>\n    </div>\n  );\n};\n\nexport default logo;\n","import React from \"react\";\n\nconst logo = () => {\n  return (\n    <div className=\"menu navbar__menu\">\n      <h1>Menu</h1>\n    </div>\n  );\n};\n\nexport default logo;\n","import React, { Component } from \"react\";\n\nimport BoardTitle from \"./BoardTitle\";\nimport Logo from \"./Logo\";\nimport Menu from \"./Menu\";\n\nimport \"../../index.css\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <Logo />\n        <BoardTitle />\n        <Menu />\n        {/* <div className=\"repo-link\">Project Repo</div> */}\n        {/* 'page-menu' will be a component */}\n        {/* <div className=\"page-menu\">Menu</div> */}\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport Board from \"../board/Board\";\nimport Nav from \"../navbar/NavBar\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  // Render two elements: a navbar and a board\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}